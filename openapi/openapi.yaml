openapi: 3.0.3
info:
  title: Go-LLama Backend API
  version: "0.3.0"
  description: |
    Backend API for Go-LLama web app.
    Provides endpoints for authentication, user management, chat, LLM model listing, streaming, and SearxNG-augmented LLM search.
servers:
  - url: http://localhost:8070
    description: Local development
tags:
  - name: Auth
    description: Authentication and session endpoints
  - name: User
    description: User CRUD and self-management
  - name: Chat
    description: Chat and message endpoints
  - name: LLM
    description: LLM model listing
  - name: Search
    description: SearxNG-augmented LLM search
  - name: WebSocket
    description: Streaming endpoints

paths:
  /setup:
    post:
      tags: [Auth]
      summary: Initial admin setup
      description: Register the first admin user. Only allowed if no users exist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetupRequest'
      responses:
        '201':
          description: Admin user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetupResponse'
        '400':
          description: Invalid request or users already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags: [Auth]
      summary: User login (returns JWT)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful, returns JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'

  /auth/me:
    get:
      tags: [Auth]
      summary: Get current user info
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /users/me:
    get:
      tags: [User]
      summary: Get own user info
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    put:
      tags: [User]
      summary: Update own password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMeRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [User]
      summary: Delete own account
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'

  /users:
    get:
      tags: [User]
      summary: List all users (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      tags: [User]
      summary: Get user by ID (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [User]
      summary: Update user by ID (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [User]
      summary: Delete user by ID (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /llms:
    get:
      tags: [LLM]
      summary: List available LLM models
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LLMModel'

  /chats:
    get:
      tags: [Chat]
      summary: List user's chats
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'

    post:
      tags: [Chat]
      summary: Create a new chat
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChatRequest'
      responses:
        '201':
          description: Chat created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'

  /chats/{id}:
    get:
      tags: [Chat]
      summary: Get chat details by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '404':
          description: Chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [Chat]
      summary: Rename chat by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
      responses:
        '200':
          description: Chat renamed
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Chat]
      summary: Delete chat by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Chat deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: boolean
                    example: true
        '404':
          description: Chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /chats/{id}/messages:
    get:
      tags: [Chat]
      summary: List messages in a chat
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

    post:
      tags: [Chat]
      summary: Send a message in a chat (optionally with web search)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        '201':
          description: Message sent (and LLM response)
          content:
            application/json:
              schema:
                type: object
                properties:
                  reply:
                    type: object
                    properties:
                      id:
                        type: integer
                      sender:
                        type: string
                      content:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
                      tokens:
                        type: integer
                      tokens_per_second:
                        type: number
                  sources:
                    type: array
                    description: List of web search results referenced (only if web_search true)
                    items:
                      type: object
                      properties:
                        title:
                          type: string
                        url:
                          type: string
                        snippet:
                          type: string
                  model_migrated:
                    type: boolean
                  old_model:
                    type: string
                  new_model:
                    type: string
        '400':
          description: Invalid request
        '403':
          description: Forbidden
        '502':
          description: LLM or search backend error

  /ws/chat:
    get:
      tags: [WebSocket]
      summary: WebSocket for streaming LLM chat responses
      description: |
        **Upgrade to WebSocket.**
        - Authenticate via `Authorization: Bearer <JWT>` header.
        - Client must send a JSON message immediately after connection:
          ```json
          { "chatId": 1, "prompt": "Say hello", "web_search": false }
          ```
        - Server streams JSON objects **as each LLM token is generated**:
          ```json
          {"token": "Hello", "index": 0}
          {"token": " world", "index": 1}
          ...
          {"event": "end"}
          ```
        - If an error occurs, a JSON object with an `"error"` key is streamed.
        - For details on protocol and troubleshooting, see MANUAL_TESTING.md.

      security:
        - bearerAuth: []
      responses:
        '101':
          description: Protocol upgrade to WebSocket
          headers:
            Upgrade:
              schema:
                type: string
              description: Indicates the protocol upgrade to WebSocket.

  /search:
    post:
      tags: [Search]
      summary: SearxNG-augmented LLM search and answer
      description: |
        Accepts a prompt, runs SearxNG web search, feeds both prompt and search results to an LLM,
        and returns the LLM's answer (with references to search results as needed).
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearxNGPromptRequest'
      responses:
        '200':
          description: Augmented LLM answer with references
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearxNGAnswerResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: SearxNG or LLM backend error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    OkResponse:
      type: object
      properties:
        message:
          type: string
          example: OK

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: An error occurred

    SetupRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required: [username, password]

    SetupResponse:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        role:
          type: string
          example: admin

    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required: [username, password]

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        role:
          type: string
        createdAt:
          type: string
          format: date-time

    UserResponse:
      allOf:
        - $ref: '#/components/schemas/User'

    UpdateMeRequest:
      type: object
      properties:
        password:
          type: string
      required: [password]

    UpdateUserRequest:
      type: object
      properties:
        password:
          type: string
        role:
          type: string
          enum: [user, admin]

    LLMModel:
      type: object
      properties:
        name:
          type: string
        url:
          type: string

    Chat:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        model:
          type: string
        userId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateChatRequest:
      type: object
      properties:
        title:
          type: string
        model:
          type: string

    Message:
      type: object
      properties:
        id:
          type: integer
        chatId:
          type: integer
        userId:
          type: integer
        content:
          type: string
        createdAt:
          type: string
          format: date-time

    SendMessageRequest:
      type: object
      properties:
        content:
          type: string
        web_search:
          type: boolean
          description: Whether to augment the prompt with live web search (SearxNG).
      required: [content]

    SearxNGPromptRequest:
      type: object
      properties:
        prompt:
          type: string
          description: The user's question or instruction

    SearxNGAnswerResponse:
      type: object
      properties:
        answer:
          type: string
          description: The LLM's answer, possibly with references to search results
        sources:
          type: array
          description: List of search results referenced in the answer
          items:
            type: object
            properties:
              title:
                type: string
              url:
                type: string
              snippet:
                type: string

  /users/online:
    get:
      tags: [User]
      summary: Get the count of unique online users
      description: Returns the number of currently active unique users (with a valid session).
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  online:
                    type: integer
                    example: 2
